<div class="tasks-container">
    <div class="tasks-header">
        <h1 class="tasks-title">Task Board</h1>
        <button class="btn-primary" onclick="openTaskModal()">
            <i class="fas fa-plus"></i> Add Task
        </button>
    </div>

    <div class="tasks-board">
        <% ['todo', 'in-progress', 'done'].forEach(status => { %>
            <div class="tasks-column">
                <h3><%= status.charAt(0).toUpperCase() + status.slice(1).replace('-', ' ') %></h3>
                <div class="tasks-list" id="<%= status %>-tasks">
                    <% 
                        const placeholderTasks = [
                            {
                                _id: '1',
                                title: 'Design New Dashboard',
                                description: 'Create wireframes and mockups for the new dashboard',
                                priority: 'high',
                                status: 'todo',
                                assignee: { avatar: '/images/avatar1.jpg', username: 'JohnDoe' },
                                dueDate: new Date()
                            },
                            {
                                _id: '2',
                                title: 'Implement User Authentication',
                                description: 'Set up JWT-based authentication system',
                                priority: 'medium',
                                status: 'in-progress',
                                assignee: { avatar: '/images/avatar2.jpg', username: 'JaneSmith' },
                                dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000)
                            },
                            {
                                _id: '3',
                                title: 'Write API Documentation',
                                description: 'Document all endpoints and their usage',
                                priority: 'low',
                                status: 'done',
                                assignee: { avatar: '/images/avatar3.jpg', username: 'MikeBrown' },
                                dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
                            }
                        ];

                        const allTasks = tasks.length > 0 ? tasks : placeholderTasks;
                        allTasks.filter(task => task.status === status).forEach(task => { 
                    %>
                        <div class="task-item" data-id="<%= task._id %>">
                            <div class="task-header">
                                <span class="task-priority <%= task.priority %>"></span>
                                <h4><%= task.title %></h4>
                            </div>
                            <% if (task.description) { %>
                                <p class="task-description"><%= task.description %></p>
                            <% } %>
                            <div class="task-footer">
                                <% if (task.assignee && task.assignee.avatar) { %>
                                    <img src="<%= task.assignee.avatar %>" alt="<%= task.assignee.username %>" class="task-avatar">
                                <% } %>
                                <% if (task.dueDate) { %>
                                    <span class="task-due-date">
                                        <i class="fas fa-calendar-alt"></i>
                                        <%= new Date(task.dueDate).toLocaleDateString() %>
                                    </span>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        <% }) %>
    </div>
</div>

<style>
    .tasks-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .tasks-board {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    .tasks-column {
        background: var(--dark);
        padding: 15px;
        border-radius: var(--radius-md);
    }

    .task-item {
        background: rgba(255, 255, 255, 0.05);
        padding: 15px;
        margin-bottom: 10px;
        border-radius: var(--radius-sm);
        cursor: move;
    }

    .task-header {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .task-priority {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .task-priority.low { background: #4caf50; }
    .task-priority.medium { background: #ffc107; }
    .task-priority.high { background: #f44336; }
    .task-priority.urgent { background: #9c27b0; }

    .task-description {
        color: var(--gray);
        font-size: 0.9em;
        margin-bottom: 10px;
    }

    .task-footer {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 10px;
    }

    .task-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
    }

    .task-due-date {
        color: var(--gray);
        font-size: 0.8em;
    }
</style>

<script>
    // JavaScript for task management
    document.addEventListener('DOMContentLoaded', () => {
        const taskForm = document.getElementById('taskForm');
        if (taskForm) {
            taskForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const task = {
                    title: document.getElementById('taskTitle').value,
                    description: document.getElementById('taskDescription').value,
                    assignee: document.getElementById('taskAssignee').value,
                    dueDate: document.getElementById('taskDueDate').value,
                    status: 'todo'
                };

                try {
                    const response = await fetch('/api/tasks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(task)
                    });

                    if (response.ok) {
                        closeTaskModal();
                        window.location.reload();
                    } else {
                        const error = await response.text();
                        throw new Error(error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert(`Error: ${error.message}`);
                }
            });
        }

        // Initialize drag and drop functionality
        initDragAndDrop();
    });

    function openTaskModal() {
        document.getElementById('taskModal').style.display = 'block';
    }

    function closeTaskModal() {
        document.getElementById('taskModal').style.display = 'none';
    }

    function initDragAndDrop() {
        const tasks = document.querySelectorAll('.task-item');
        const columns = document.querySelectorAll('.tasks-list');

        tasks.forEach(task => {
            task.addEventListener('dragstart', () => {
                task.classList.add('dragging');
            });

            task.addEventListener('dragend', () => {
                task.classList.remove('dragging');
            });
        });

        columns.forEach(column => {
            column.addEventListener('dragover', e => {
                e.preventDefault();
                const afterElement = getDragAfterElement(column, e.clientY);
                const draggable = document.querySelector('.dragging');
                if (afterElement == null) {
                    column.appendChild(draggable);
                } else {
                    column.insertBefore(draggable, afterElement);
                }
            });
        });
    }

    function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.task-item:not(.dragging)')];

        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child }
            } else {
                return closest
            }
        }, { offset: Number.NEGATIVE_INFINITY }).element
    }
</script>