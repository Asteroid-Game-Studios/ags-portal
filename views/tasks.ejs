<div class="tasks-container">
    <div class="tasks-header">
        <h1 class="tasks-title">Task Board</h1>
        <!-- Remove the onclick attribute -->
        <button class="btn-primary" id="addTaskButton">
            <i class="fas fa-plus"></i> Add Task
        </button>
    </div>

    <!-- Remove the inline modal that was added here -->

    <div class="tasks-board">
        <% ['todo', 'in-progress', 'done'].forEach(status => { %>
            <div class="tasks-column">
                <h3><%= status.charAt(0).toUpperCase() + status.slice(1).replace('-', ' ') %></h3>
                <div class="tasks-list" id="<%= status %>-tasks">
                    <% tasks.filter(task => task.status === status).forEach(task => { %>
                        <div class="task-item" data-id="<%= task._id %>">
                            <div class="task-header">
                                <span class="task-priority <%= task.priority %>"></span>
                                <h4><%= task.title %></h4>
                            </div>
                            <% if (task.description) { %>
                                <p class="task-description"><%= task.description %></p>
                            <% } %>
                            <div class="task-footer">
                                <% if (task.dueDate) { %>
                                    <span class="task-due-date">
                                        <i class="fas fa-calendar-alt"></i>
                                        <%= new Date(task.dueDate).toLocaleDateString() %>
                                    </span>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        <% }) %>
    </div>
</div>

<!-- Task Modal - Keep only this one -->
<!-- Update the modal with more explicit styles -->
<div id="taskModal" class="task-modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100%; height:100%; overflow:auto; background-color:rgba(0,0,0,0.5); visibility:visible;">
    <div class="task-modal-content" style="background-color:#fff; margin:10% auto; padding:20px; border-radius:8px; width:80%; max-width:500px; box-shadow:0 4px 8px rgba(0,0,0,0.2); position:relative;">
        <span class="close" style="float:right; font-size:24px; font-weight:bold; cursor:pointer; position:absolute; right:10px; top:10px;">&times;</span>
        <h2>Create New Task</h2>
        <form id="taskForm">
            <div class="form-group">
                <label for="taskTitle">Title</label>
                <input type="text" id="taskTitle" required>
            </div>
            <div class="form-group">
                <label for="taskDescription">Description</label>
                <textarea id="taskDescription"></textarea>
            </div>
            <div class="form-group">
                <label for="taskPriority">Priority</label>
                <select id="taskPriority" required>
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="urgent">Urgent</option>
                </select>
            </div>
            <div class="form-group">
                <label for="taskDueDate">Due Date</label>
                <input type="date" id="taskDueDate" required>
            </div>
            <button type="submit" class="btn-primary">Create Task</button>
        </form>
    </div>
</div>

<script>
    console.log('Script starting execution');
    
    // Try to get the button and modal immediately
    const addTaskButton = document.getElementById('addTaskButton');
    const taskModal = document.getElementById('taskModal');
    
    console.log('Initial elements check:', { 
        buttonExists: !!addTaskButton, 
        modalExists: !!taskModal 
    });
    
    // Define these functions for use elsewhere in the code
    function openTaskModal() {
        console.log('openTaskModal called');
        const modal = document.getElementById('taskModal');
        console.log('Modal element in openTaskModal:', modal);
        if (modal) {
            console.log('Setting modal display to block');
            modal.style.display = 'block';
            console.log('Modal display style is now:', modal.style.display);
        } else {
            console.error('Modal element not found in openTaskModal function');
        }
    }

    function closeTaskModal() {
        console.log('closeTaskModal called');
        const modal = document.getElementById('taskModal');
        if (modal) {
            modal.style.display = 'none';
            console.log('Modal hidden');
        } else {
            console.error('Modal element not found in closeTaskModal function');
        }
    }

    // Add direct event handlers
    if (addTaskButton) {
        console.log('Adding click handler to button');
        addTaskButton.onclick = function(e) {
            console.log('Button clicked via onclick property');
            e.preventDefault();
            openTaskModal();
        };
    } else {
        console.error('Button not found when setting onclick');
    }
    
    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM fully loaded event fired');
        
        // Try to get elements again after DOM is loaded
        const addTaskButtonAfterLoad = document.getElementById('addTaskButton');
        const taskModalAfterLoad = document.getElementById('taskModal');
        const closeButton = document.querySelector('#taskModal .close');
        
        console.log('Elements after DOM loaded:', {
            buttonExists: !!addTaskButtonAfterLoad,
            modalExists: !!taskModalAfterLoad,
            closeButtonExists: !!closeButton
        });
        
        // Add event listeners after DOM is loaded
        if (addTaskButtonAfterLoad) {
            addTaskButtonAfterLoad.addEventListener('click', function(e) {
                console.log('Button clicked via addEventListener');
                e.preventDefault();
                openTaskModal();
            });
        }
        
        if (closeButton) {
            closeButton.addEventListener('click', function() {
                console.log('Close button clicked');
                closeTaskModal();
            });
        }
        
        // Rest of your code remains the same
        // Add button click handler
        document.getElementById('addTaskButton').addEventListener('click', openTaskModal);
        
        // Add close button handler
        document.querySelector('#taskModal .close').addEventListener('click', closeTaskModal);
        
        // Close when clicking outside
        window.addEventListener('click', (event) => {
            if (event.target === document.getElementById('taskModal')) {
                closeTaskModal();
            }
        });

        // Add form submission handler
        const taskForm = document.getElementById('taskForm');
        if (taskForm) {
            taskForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const task = {
                    title: document.getElementById('taskTitle').value,
                    description: document.getElementById('taskDescription').value,
                    priority: document.getElementById('taskPriority').value,
                    dueDate: document.getElementById('taskDueDate').value,
                    status: 'todo'
                };

                try {
                    // In the submit event listener for the task form, change:
                    const response = await fetch('/api/tasks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(task)
                    });

                    if (response.ok) {
                        const data = await response.json();
                        closeTaskModal();
                        taskForm.reset();  // Clear the form
                        addTaskToDOM(data);
                    } else {
                        const error = await response.text();
                        throw new Error(error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert(`Error: ${error.message}`);
                }
            });
            
            // Add this new function
            function addTaskToDOM(task) {
                const taskElement = document.createElement('div');
                taskElement.className = 'task-item';
                taskElement.dataset.id = task._id;
                taskElement.innerHTML = `
                    <div class="task-header">
                        <span class="task-priority ${task.priority}"></span>
                        <h4>${task.title}</h4>
                    </div>
                    ${task.description ? `<p class="task-description">${task.description}</p>` : ''}
                    <div class="task-footer">
                        ${task.dueDate ? `<span class="task-due-date">
                            <i class="fas fa-calendar-alt"></i>
                            ${new Date(task.dueDate).toLocaleDateString()}
                        </span>` : ''}
                    </div>
                `;
                document.getElementById('todo-tasks').appendChild(taskElement);
                initDragAndDrop(); // Reinitialize drag and drop for the new task
            }
        }
    });
</script>

<script>
    async function updateTaskStatus(taskId, newStatus) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout

            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: newStatus }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('Error updating task status:', error);
            throw error;
        }
    }

    function initDragAndDrop() {
        const tasks = document.querySelectorAll('.task-item');
        const columns = document.querySelectorAll('.tasks-list');

        tasks.forEach(task => {
            task.addEventListener('dragstart', () => {
                task.classList.add('dragging');
            });

            task.addEventListener('dragend', async () => {
                try {
                    const taskId = task.dataset.id;
                    const newStatus = task.parentElement.id.replace('-tasks', '');
                    await updateTaskStatus(taskId, newStatus);
                } catch (error) {
                    console.error('Error handling drag end:', error);
                    // Optionally revert the UI change
                } finally {
                    task.classList.remove('dragging');
                }
            });
        });
    }
</script>